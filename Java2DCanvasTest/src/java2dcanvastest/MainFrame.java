/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on 10-Jan-2010, 17:17:13
 */
package java2dcanvastest;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferStrategy;
import java.io.File;
import java.net.URL;
import javax.imageio.ImageIO;

/**
 *
 * @author Richard
 */
public class MainFrame extends javax.swing.JFrame {

    private BufferStrategy strategy;
    private Image boxImage;
    private int boxPosX = 10;
    private int boxPosY = 10;
    private int boxSize = 5;
    private enum BoxDirection { LEFT, RIGHT };
    private BoxDirection boxDirection = BoxDirection.RIGHT;
    private long boxRoundTime = System.currentTimeMillis();

    private Image backgroundImage;
    private int imagePosX = 0;
    private int imagePosY = 0;

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        loadBackgroundImage();
        loadBoxImage();
    }

    private void loadBackgroundImage() {
        try {
            File backgroundFile = new File("C:\\Users\\Richard\\Pictures\\tmpphpkpTd4Z.jpg");
//            File backgroundFile = new File("C:\\Users\\Richard\\Pictures\\animated.gif");
//            URL backgroundURL = backgroundFile.toURI().toURL();
            backgroundImage = ImageIO.read(backgroundFile);
        } catch (Exception ex) {
            System.err.println("Couldn't load background image: " + ex);
        }
    }

    private void loadBoxImage() {
        try {
            File boxFile = new File("C:\\Users\\Richard\\Pictures\\animated.gif");
            boxImage = ImageIO.read(boxFile);
        } catch (Exception ex) {
            System.err.println("Couldn't load box image: " + ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas1 = new java.awt.Canvas();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("jButton1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(canvas1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jButton1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(canvas1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        MainFrame mf = new MainFrame();
        mf.setTitle("Test");
        mf.pack();
        mf.setVisible(true);

        mf.startGameLoop();

    }

    private void startGameLoop() {
        canvas1.setVisible(true);
        canvas1.setIgnoreRepaint(true);
        canvas1.createBufferStrategy(4);
        strategy = canvas1.getBufferStrategy();

        canvas1.addKeyListener(new KeyListener() {
            int left = 0;
            int right = 0;
            int up = 0;
            int down = 0;

            public void keyTyped(KeyEvent e) {

            }

            private void reposition() {
                imagePosX += left-right;
                imagePosY += up-down;
            }

            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_LEFT) {
                    left = 1;
		}

		if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
                    right = 1;
                }

                if (e.getKeyCode() == KeyEvent.VK_UP) {
                    up = 1;
                }

                if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                    down = 1;
                }

                reposition();
            }

            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_LEFT) {
                    left = 0;
		}

		if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
                    right = 0;
                }

                if (e.getKeyCode() == KeyEvent.VK_UP) {
                    up = 0;
                }

                if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                    down = 0;
                }
                
                reposition();
            }
        });

        long lastLoopTime = System.currentTimeMillis();

        while (true) {
            // work out how long its been since the last update, this
            // will be used to calculate how far the entities should
            // move this loop
            long delta = System.currentTimeMillis() - lastLoopTime;
            lastLoopTime = System.currentTimeMillis();

            // Get hold of a graphics context for the accelerated
            // surface and blank it out
            Graphics2D g = (Graphics2D) strategy.getDrawGraphics();
            g.drawImage(backgroundImage, imagePosX, imagePosY, rootPane);

            drawMovingBox(g);

            // finally, we've completed drawing so clear up the graphics
            // and flip the buffer over
            g.dispose();
            strategy.show();

            // finally pause for a bit. Note: this should run us at about
            // 100 fps but on windows this might vary each loop due to
            // a bad implementation of timer
            try {
                Thread.sleep(5);
            } catch (Exception e) {
            }
        }
    }

    private void drawMovingBox(Graphics2D g) {
        g.setColor(Color.red);
//        g.fillRect(boxPosX, boxPosY, boxSize, boxSize);
        g.rotate(170);
        g.drawImage(boxImage, boxPosX, boxPosY, rootPane);

        switch(boxDirection) {
            case RIGHT :
                boxPosX += 1;
                break;
            case LEFT :
                boxPosX -= 1;
                break;
        }

        if (boxPosX > 200) {
            boxDirection = BoxDirection.LEFT;
        } else if (boxPosX < 10) {
            boxDirection = BoxDirection.RIGHT;
            System.out.println(""+(System.currentTimeMillis()-boxRoundTime));
            boxRoundTime = System.currentTimeMillis();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas canvas1;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}

